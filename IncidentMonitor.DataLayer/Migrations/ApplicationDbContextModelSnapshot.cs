// <auto-generated />
using System;
using IncidentMonitor.DataLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IncidentMonitor.DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("IncidentMonitor.AssystSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "baseUrl");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.ToTable("AssystSettings");
                });

            modelBuilder.Entity("IncidentMonitor.DataLayer.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompanySiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("EnableEmailNotifications")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "enableEmailNotifications");

                    b.Property<string>("ExternalId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "externalId");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShiftEndHours")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEndHours");

                    b.Property<int>("ShiftEndMinutes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEndMinutes");

                    b.Property<int>("ShiftStartHours")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftStartHours");

                    b.Property<int>("ShiftStartMinutes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftStartMinutes");

                    b.Property<int?>("TimeZoneOffset")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "tzOffset");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanySiteId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IncidentMonitor.Models.CompanySite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<int?>("AlarmInterval")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "alarmInterval");

                    b.Property<int?>("AlarmIntervalSeconds")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "alarmIntervalSeconds");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "companyName");

                    b.Property<bool?>("EnableAlarmNotifications")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "enableAlarmNotifications");

                    b.Property<bool?>("EnableEmailNotifications")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "enableEmailNotifications");

                    b.Property<int?>("RefreshInterval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShiftEndHours")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEndHours");

                    b.Property<int>("ShiftEndMinutes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftEndMinutes");

                    b.Property<int>("ShiftStartHours")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftStartHours");

                    b.Property<int>("ShiftStartMinutes")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "shiftStartMinutes");

                    b.Property<int?>("TimeZoneOffset")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "tzOffset");

                    b.HasKey("Id");

                    b.ToTable("CompanySites");
                });

            modelBuilder.Entity("IncidentMonitor.Models.EmailConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<bool>("EnableSsl")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "enableSsl");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("SmtpClientName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "smtpClientName");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "smtpPort");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.ToTable("EmailConfigurations");
                });

            modelBuilder.Entity("IncidentMonitor.Models.Integration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "dateCreated");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "eventData");

                    b.Property<ulong>("EventId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "eventId");

                    b.Property<int>("IntegratedSystem")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "integratedSystem");

                    b.Property<string>("IntegratedTickedData")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "integratedTickedData");

                    b.Property<string>("IntegratedTicketId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "integratedTicketId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "lastUpdated");

                    b.HasKey("Id");

                    b.ToTable("Integrations");
                });

            modelBuilder.Entity("IncidentMonitor.Models.RemedyForceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("AccessToken")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "accessToken");

                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientId");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "clientSecret");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "grantType");

                    b.Property<string>("InstanceUrl")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "instanceUrl");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "token");

                    b.Property<string>("TokenEndpoint")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tokenEndPoint");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "userName");

                    b.HasKey("Id");

                    b.ToTable("RemedyForceSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IncidentMonitor.DataLayer.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("IncidentMonitor.DataLayer.Models.ApplicationUser", b =>
                {
                    b.HasOne("IncidentMonitor.Models.CompanySite", "CompanySite")
                        .WithMany()
                        .HasForeignKey("CompanySiteId");

                    b.Navigation("CompanySite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IncidentMonitor.DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IncidentMonitor.DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentMonitor.DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IncidentMonitor.DataLayer.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
